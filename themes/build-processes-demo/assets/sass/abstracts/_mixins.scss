@use "variables" as *;
@use "sass:map";

// Media query "greater than $breakpoint".
@mixin breakpoint-up($breakpoint) {

	@if map.has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map.get($breakpoints, $breakpoint);

		@media (min-width: $breakpoint-value) {
			@content;
		}
	} @else {

		@warn "Undefined Breakpoint: (#{$breakpoint}). Available breakpoints: #{map.keys($breakpoints)}";
	}
}

// Media query "less than $breakpoint".
@mixin breakpoint-down($breakpoint) {

	@if map.has-key($breakpoints, $breakpoint) {
		$breakpoint-value: map.get($breakpoints, $breakpoint);

		@media (max-width: ($breakpoint-value - 1)) {
			@content;
		}
	} @else {

		@warn "Undefined Breakpoint: (#{$breakpoint}). Available breakpoints: #{map.keys($breakpoints)}";
	}
}

// Media query "between $a and $b".
@mixin breakpoint-between($a, $b) {

	@if map.has-key($breakpoints, $a) and map.has-key($breakpoints, $b) {
		$breakpoint-a: map.get($breakpoints, $a);
		$breakpoint-b: map.get($breakpoints, $b);

		@media (min-width: $breakpoint-a) and (max-width: ($breakpoint-b - 1)) {
			@content;
		}
	} @else {

		@if (map.has-key($breakpoints, $a) == false) {

			@warn "Undefined Breakpoint: #{$a}. Available breakpoints: #{map.keys($breakpoints)}";
		}

		@if (map.has-key($breakpoints, $b) == false) {

			@warn "Undefined Breakpoint: #{$b}. Available breakpoints: #{map.keys($breakpoints)}";
		}
	}
}
